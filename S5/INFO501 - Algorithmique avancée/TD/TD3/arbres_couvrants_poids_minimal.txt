Rappels :
Le père doit être plus grand que chacun de ses fils

|16|14|10|8|7|9|3|2|4|1|

2)
parent(i){
  retourner i/2
}

gauche(i){
  retourner 2*i
}

droite(i){
  retourner 2*i +1
}

3)
                          4
              1                      3
      2            16           9        10
  14    8       7

entasser_max(t,i){
  g = gauche(i);
  d = droite(i);
  Si g<=taille & t[g]>t[i]
    max = g;
  Sinon
    max = i;
  Si g<=taille & t[d]>t[max];
    max = d;
  Si max!=i
    échanger(t[i],t[max]);
    entasser_max(t.max)
}
pire des cas : pere tout en haut qui s'échange avec la dernière feuille donc => O(log(n))

construire_tas_max(t){
  t.taille = t.longueur
  Pour i = [t.longueur/2] decr jusqu'à 1
    entasser_max(t,i);
}
=> O(n log(n)) mais en réalité O(n)

tri_par_tas(t){
  construire_tas_max(t);
  Pour i=t.longueur decr jusqu'à 2
    échange(t[i],t[1])
    t.taille--;
    entasser_max(t,1);
} O(n log(n));

EXERCICE 3 - Files de priorité
1)
maximum_tas(t){
  retourner t[1];
}

extraire_tas_max(t){
  Si t.taille<1
    "erreur limite inférieure dépassée"
  Sinon
    max = t[1];
    t[1] = t[t.taille];
    t.taille--;
    entasser_max(t,1);
    retourner max;
}

augmenter_clé_tas(t,i,cle){
  
}
