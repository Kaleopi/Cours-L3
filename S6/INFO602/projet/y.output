Terminaux inutilisés dans la grammaire

   VRAI
   FAUX
   CASE
   FUNC
   F_AVANCE
   F_DROITE
   F_GAUCHE
   FINTQ
   FINFUNC
   INFEG
   SUPEG
   EGEG
   INF
   SUP


Grammaire

    0 $accept: parser $end

    1 parser: json
    2       | pseudocode

    3 json: '{' lelems '}'

    4 lelems: elemjson ',' lelems
    5       | elemjson

    6 elemjson: LARGEUR ':' ENTIER
    7         | HAUTEUR ':' ENTIER
    8         | DEBUT ':' debutjson
    9         | CASES ':' tabcases

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

   11 direction: BAS
   12          | HAUT
   13          | DROITE
   14          | GAUCHE

   15 tabcases: '[' cases ']'

   16 cases: scase ',' cases
   17      | scase

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

   19 type: CAISSE
   20     | TROU
   21     | BILLE
   22     | BLOC

   23 pseudocode: procedure pseudocode
   24           | procedure

   25 procedure: PROC signature

   26 signature: "main()" code FINPROC
   27          | NOM '(' arguments ')' code FINPROC

   28 arguments: argument ',' arguments
   29          | argument

   30 argument: NOM ',' TYPE

   31 code: ligne code
   32     | ligne

   33 ligne: affectaction

   34 affectaction: NOM '=' ENTIER
   35             | NOM '=' NOM


Terminaux, suivis des règles où ils apparaissent

$end (0) 0
'(' (40) 27
')' (41) 27
',' (44) 4 10 16 18 28 30
':' (58) 6 7 8 9 10 18
'=' (61) 34 35
'[' (91) 15
']' (93) 15
'{' (123) 3 10 18
'}' (125) 3 10 18
error (256)
ENTIER (258) 6 7 10 18 34
NOM (259) 27 30 34 35
VRAI (260)
FAUX (261)
HAUTEUR (262) 7
LARGEUR (263) 6
X (264) 10 18
Y (265) 10 18
TYPEJSON (266) 18
BLOC (267) 22
BILLE (268) 21
CAISSE (269) 19
TROU (270) 20
CASE (271)
CASES (272) 9
DEBUT (273) 8
DIRECTION (274) 10
BAS (275) 11
HAUT (276) 12
DROITE (277) 13
GAUCHE (278) 14
TYPE (279) 30
PROC (280) 25
FUNC (281)
F_AVANCE (282)
F_DROITE (283)
F_GAUCHE (284)
FINTQ (285)
FINPROC (286) 26 27
FINFUNC (287)
INFEG (288)
SUPEG (289)
EGEG (290)
INF (291)
SUP (292)
"main()" (293) 26


Non-terminaux, suivis des règles où ils apparaissent

$accept (48)
    à gauche: 0
parser (49)
    à gauche: 1 2, à droite: 0
json (50)
    à gauche: 3, à droite: 1
lelems (51)
    à gauche: 4 5, à droite: 3 4
elemjson (52)
    à gauche: 6 7 8 9, à droite: 4 5
debutjson (53)
    à gauche: 10, à droite: 8
direction (54)
    à gauche: 11 12 13 14, à droite: 10
tabcases (55)
    à gauche: 15, à droite: 9
cases (56)
    à gauche: 16 17, à droite: 15 16
scase (57)
    à gauche: 18, à droite: 16 17
type (58)
    à gauche: 19 20 21 22, à droite: 18
pseudocode (59)
    à gauche: 23 24, à droite: 2 23
procedure (60)
    à gauche: 25, à droite: 23 24
signature (61)
    à gauche: 26 27, à droite: 25
arguments (62)
    à gauche: 28 29, à droite: 27 28
argument (63)
    à gauche: 30, à droite: 28 29
code (64)
    à gauche: 31 32, à droite: 26 27 31
ligne (65)
    à gauche: 33, à droite: 31 32
affectaction (66)
    à gauche: 34 35, à droite: 33


État 0

    0 $accept: . parser $end

    PROC  décalage et aller à l'état 1
    '{'   décalage et aller à l'état 2

    parser      aller à l'état 3
    json        aller à l'état 4
    pseudocode  aller à l'état 5
    procedure   aller à l'état 6


État 1

   25 procedure: PROC . signature

    NOM       décalage et aller à l'état 7
    "main()"  décalage et aller à l'état 8

    signature  aller à l'état 9


État 2

    3 json: '{' . lelems '}'

    HAUTEUR  décalage et aller à l'état 10
    LARGEUR  décalage et aller à l'état 11
    CASES    décalage et aller à l'état 12
    DEBUT    décalage et aller à l'état 13

    lelems    aller à l'état 14
    elemjson  aller à l'état 15


État 3

    0 $accept: parser . $end

    $end  décalage et aller à l'état 16


État 4

    1 parser: json .

    $défaut  réduction par utilisation de la règle 1 (parser)


État 5

    2 parser: pseudocode .

    $défaut  réduction par utilisation de la règle 2 (parser)


État 6

   23 pseudocode: procedure . pseudocode
   24           | procedure .

    PROC  décalage et aller à l'état 1

    $défaut  réduction par utilisation de la règle 24 (pseudocode)

    pseudocode  aller à l'état 17
    procedure   aller à l'état 6


État 7

   27 signature: NOM . '(' arguments ')' code FINPROC

    '('  décalage et aller à l'état 18


État 8

   26 signature: "main()" . code FINPROC

    NOM  décalage et aller à l'état 19

    code          aller à l'état 20
    ligne         aller à l'état 21
    affectaction  aller à l'état 22


État 9

   25 procedure: PROC signature .

    $défaut  réduction par utilisation de la règle 25 (procedure)


État 10

    7 elemjson: HAUTEUR . ':' ENTIER

    ':'  décalage et aller à l'état 23


État 11

    6 elemjson: LARGEUR . ':' ENTIER

    ':'  décalage et aller à l'état 24


État 12

    9 elemjson: CASES . ':' tabcases

    ':'  décalage et aller à l'état 25


État 13

    8 elemjson: DEBUT . ':' debutjson

    ':'  décalage et aller à l'état 26


État 14

    3 json: '{' lelems . '}'

    '}'  décalage et aller à l'état 27


État 15

    4 lelems: elemjson . ',' lelems
    5       | elemjson .

    ','  décalage et aller à l'état 28

    $défaut  réduction par utilisation de la règle 5 (lelems)


État 16

    0 $accept: parser $end .

    $défaut  accepter


État 17

   23 pseudocode: procedure pseudocode .

    $défaut  réduction par utilisation de la règle 23 (pseudocode)


État 18

   27 signature: NOM '(' . arguments ')' code FINPROC

    NOM  décalage et aller à l'état 29

    arguments  aller à l'état 30
    argument   aller à l'état 31


État 19

   34 affectaction: NOM . '=' ENTIER
   35             | NOM . '=' NOM

    '='  décalage et aller à l'état 32


État 20

   26 signature: "main()" code . FINPROC

    FINPROC  décalage et aller à l'état 33


État 21

   31 code: ligne . code
   32     | ligne .

    NOM  décalage et aller à l'état 19

    $défaut  réduction par utilisation de la règle 32 (code)

    code          aller à l'état 34
    ligne         aller à l'état 21
    affectaction  aller à l'état 22


État 22

   33 ligne: affectaction .

    $défaut  réduction par utilisation de la règle 33 (ligne)


État 23

    7 elemjson: HAUTEUR ':' . ENTIER

    ENTIER  décalage et aller à l'état 35


État 24

    6 elemjson: LARGEUR ':' . ENTIER

    ENTIER  décalage et aller à l'état 36


État 25

    9 elemjson: CASES ':' . tabcases

    '['  décalage et aller à l'état 37

    tabcases  aller à l'état 38


État 26

    8 elemjson: DEBUT ':' . debutjson

    '{'  décalage et aller à l'état 39

    debutjson  aller à l'état 40


État 27

    3 json: '{' lelems '}' .

    $défaut  réduction par utilisation de la règle 3 (json)


État 28

    4 lelems: elemjson ',' . lelems

    HAUTEUR  décalage et aller à l'état 10
    LARGEUR  décalage et aller à l'état 11
    CASES    décalage et aller à l'état 12
    DEBUT    décalage et aller à l'état 13

    lelems    aller à l'état 41
    elemjson  aller à l'état 15


État 29

   30 argument: NOM . ',' TYPE

    ','  décalage et aller à l'état 42


État 30

   27 signature: NOM '(' arguments . ')' code FINPROC

    ')'  décalage et aller à l'état 43


État 31

   28 arguments: argument . ',' arguments
   29          | argument .

    ','  décalage et aller à l'état 44

    $défaut  réduction par utilisation de la règle 29 (arguments)


État 32

   34 affectaction: NOM '=' . ENTIER
   35             | NOM '=' . NOM

    ENTIER  décalage et aller à l'état 45
    NOM     décalage et aller à l'état 46


État 33

   26 signature: "main()" code FINPROC .

    $défaut  réduction par utilisation de la règle 26 (signature)


État 34

   31 code: ligne code .

    $défaut  réduction par utilisation de la règle 31 (code)


État 35

    7 elemjson: HAUTEUR ':' ENTIER .

    $défaut  réduction par utilisation de la règle 7 (elemjson)


État 36

    6 elemjson: LARGEUR ':' ENTIER .

    $défaut  réduction par utilisation de la règle 6 (elemjson)


État 37

   15 tabcases: '[' . cases ']'

    '{'  décalage et aller à l'état 47

    cases  aller à l'état 48
    scase  aller à l'état 49


État 38

    9 elemjson: CASES ':' tabcases .

    $défaut  réduction par utilisation de la règle 9 (elemjson)


État 39

   10 debutjson: '{' . X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    X  décalage et aller à l'état 50


État 40

    8 elemjson: DEBUT ':' debutjson .

    $défaut  réduction par utilisation de la règle 8 (elemjson)


État 41

    4 lelems: elemjson ',' lelems .

    $défaut  réduction par utilisation de la règle 4 (lelems)


État 42

   30 argument: NOM ',' . TYPE

    TYPE  décalage et aller à l'état 51


État 43

   27 signature: NOM '(' arguments ')' . code FINPROC

    NOM  décalage et aller à l'état 19

    code          aller à l'état 52
    ligne         aller à l'état 21
    affectaction  aller à l'état 22


État 44

   28 arguments: argument ',' . arguments

    NOM  décalage et aller à l'état 29

    arguments  aller à l'état 53
    argument   aller à l'état 31


État 45

   34 affectaction: NOM '=' ENTIER .

    $défaut  réduction par utilisation de la règle 34 (affectaction)


État 46

   35 affectaction: NOM '=' NOM .

    $défaut  réduction par utilisation de la règle 35 (affectaction)


État 47

   18 scase: '{' . X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    X  décalage et aller à l'état 54


État 48

   15 tabcases: '[' cases . ']'

    ']'  décalage et aller à l'état 55


État 49

   16 cases: scase . ',' cases
   17      | scase .

    ','  décalage et aller à l'état 56

    $défaut  réduction par utilisation de la règle 17 (cases)


État 50

   10 debutjson: '{' X . ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ':'  décalage et aller à l'état 57


État 51

   30 argument: NOM ',' TYPE .

    $défaut  réduction par utilisation de la règle 30 (argument)


État 52

   27 signature: NOM '(' arguments ')' code . FINPROC

    FINPROC  décalage et aller à l'état 58


État 53

   28 arguments: argument ',' arguments .

    $défaut  réduction par utilisation de la règle 28 (arguments)


État 54

   18 scase: '{' X . ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ':'  décalage et aller à l'état 59


État 55

   15 tabcases: '[' cases ']' .

    $défaut  réduction par utilisation de la règle 15 (tabcases)


État 56

   16 cases: scase ',' . cases

    '{'  décalage et aller à l'état 47

    cases  aller à l'état 60
    scase  aller à l'état 49


État 57

   10 debutjson: '{' X ':' . ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ENTIER  décalage et aller à l'état 61


État 58

   27 signature: NOM '(' arguments ')' code FINPROC .

    $défaut  réduction par utilisation de la règle 27 (signature)


État 59

   18 scase: '{' X ':' . ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ENTIER  décalage et aller à l'état 62


État 60

   16 cases: scase ',' cases .

    $défaut  réduction par utilisation de la règle 16 (cases)


État 61

   10 debutjson: '{' X ':' ENTIER . ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ','  décalage et aller à l'état 63


État 62

   18 scase: '{' X ':' ENTIER . ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ','  décalage et aller à l'état 64


État 63

   10 debutjson: '{' X ':' ENTIER ',' . Y ':' ENTIER ',' DIRECTION ':' direction '}'

    Y  décalage et aller à l'état 65


État 64

   18 scase: '{' X ':' ENTIER ',' . Y ':' ENTIER ',' TYPEJSON ':' type '}'

    Y  décalage et aller à l'état 66


État 65

   10 debutjson: '{' X ':' ENTIER ',' Y . ':' ENTIER ',' DIRECTION ':' direction '}'

    ':'  décalage et aller à l'état 67


État 66

   18 scase: '{' X ':' ENTIER ',' Y . ':' ENTIER ',' TYPEJSON ':' type '}'

    ':'  décalage et aller à l'état 68


État 67

   10 debutjson: '{' X ':' ENTIER ',' Y ':' . ENTIER ',' DIRECTION ':' direction '}'

    ENTIER  décalage et aller à l'état 69


État 68

   18 scase: '{' X ':' ENTIER ',' Y ':' . ENTIER ',' TYPEJSON ':' type '}'

    ENTIER  décalage et aller à l'état 70


État 69

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER . ',' DIRECTION ':' direction '}'

    ','  décalage et aller à l'état 71


État 70

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER . ',' TYPEJSON ':' type '}'

    ','  décalage et aller à l'état 72


État 71

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' . DIRECTION ':' direction '}'

    DIRECTION  décalage et aller à l'état 73


État 72

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' . TYPEJSON ':' type '}'

    TYPEJSON  décalage et aller à l'état 74


État 73

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION . ':' direction '}'

    ':'  décalage et aller à l'état 75


État 74

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON . ':' type '}'

    ':'  décalage et aller à l'état 76


État 75

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' . direction '}'

    BAS     décalage et aller à l'état 77
    HAUT    décalage et aller à l'état 78
    DROITE  décalage et aller à l'état 79
    GAUCHE  décalage et aller à l'état 80

    direction  aller à l'état 81


État 76

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' . type '}'

    BLOC    décalage et aller à l'état 82
    BILLE   décalage et aller à l'état 83
    CAISSE  décalage et aller à l'état 84
    TROU    décalage et aller à l'état 85

    type  aller à l'état 86


État 77

   11 direction: BAS .

    $défaut  réduction par utilisation de la règle 11 (direction)


État 78

   12 direction: HAUT .

    $défaut  réduction par utilisation de la règle 12 (direction)


État 79

   13 direction: DROITE .

    $défaut  réduction par utilisation de la règle 13 (direction)


État 80

   14 direction: GAUCHE .

    $défaut  réduction par utilisation de la règle 14 (direction)


État 81

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction . '}'

    '}'  décalage et aller à l'état 87


État 82

   22 type: BLOC .

    $défaut  réduction par utilisation de la règle 22 (type)


État 83

   21 type: BILLE .

    $défaut  réduction par utilisation de la règle 21 (type)


État 84

   19 type: CAISSE .

    $défaut  réduction par utilisation de la règle 19 (type)


État 85

   20 type: TROU .

    $défaut  réduction par utilisation de la règle 20 (type)


État 86

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type . '}'

    '}'  décalage et aller à l'état 88


État 87

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}' .

    $défaut  réduction par utilisation de la règle 10 (debutjson)


État 88

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}' .

    $défaut  réduction par utilisation de la règle 18 (scase)
