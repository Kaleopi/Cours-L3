Terminaux inutilisés dans la grammaire

   VRAI
   FAUX
   CASE
   FUNC
   F_AVANCE
   F_DROITE
   F_GAUCHE
   FINFUNC


Grammaire

    0 $accept: parser $end

    1 parser: json
    2       | pseudocode

    3 json: '{' lelems '}'

    4 lelems: elemjson ',' lelems
    5       | elemjson

    6 elemjson: LARGEUR ':' ENTIER
    7         | HAUTEUR ':' ENTIER
    8         | DEBUT ':' debutjson
    9         | CASES ':' tabcases

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

   11 direction: BAS
   12          | HAUT
   13          | DROITE
   14          | GAUCHE

   15 tabcases: '[' cases ']'

   16 cases: scase ',' cases
   17      | scase

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

   19 type: CAISSE
   20     | TROU
   21     | BILLE
   22     | BLOC

   23 pseudocode: procedure pseudocode
   24           | procedure

   25 procedure: PROC signature

   26 signature: "main()" code FINPROC
   27          | NOM '(' arguments ')' code FINPROC

   28 arguments: argument ',' arguments
   29          | argument

   30 argument: NOM ':' TYPE

   31 code: ligne code
   32     | ligne

   33 ligne: affectaction
   34      | appelproc
   35      | conditionnelle
   36      | boucle

   37 affectaction: NOM '=' calcul

   38 calcul: calcul OPERATEUR valeur
   39       | valeur

   40 valeur: NOM
   41       | ENTIER

   42 appelproc: NOM '(' params ')'
   43          | NOM "()"

   44 params: param
   45       | params ',' param

   46 param: NOM
   47      | ENTIER

   48 conditionnelle: "si(" expbool ')' code sinon "finsi"

   49 sinon: "sinon" code
   50      | %empty

   51 boucle: "tantque(" expbool ")" code FINTQ

   52 expbool: valeur comparateur valeur

   53 comparateur: INFEG
   54            | SUPEG
   55            | EGGEGG
   56            | INF
   57            | SUP


Terminaux, suivis des règles où ils apparaissent

$end (0) 0
'(' (40) 27 42
')' (41) 27 42 48
',' (44) 4 10 16 18 28 45
':' (58) 6 7 8 9 10 18 30
'=' (61) 37
'[' (91) 15
']' (93) 15
'{' (123) 3 10 18
'}' (125) 3 10 18
error (256)
ENTIER (258) 6 7 10 18 41 47
NOM (259) 27 30 37 40 42 43 46
VRAI (260)
FAUX (261)
OPERATEUR (262) 38
HAUTEUR (263) 7
LARGEUR (264) 6
X (265) 10 18
Y (266) 10 18
TYPEJSON (267) 18
BLOC (268) 22
BILLE (269) 21
CAISSE (270) 19
TROU (271) 20
CASE (272)
CASES (273) 9
DEBUT (274) 8
DIRECTION (275) 10
BAS (276) 11
HAUT (277) 12
DROITE (278) 13
GAUCHE (279) 14
TYPE (280) 30
PROC (281) 25
FUNC (282)
F_AVANCE (283)
F_DROITE (284)
F_GAUCHE (285)
FINTQ (286) 51
FINPROC (287) 26 27
FINFUNC (288)
INFEG (289) 53
SUPEG (290) 54
EGGEGG (291) 55
INF (292) 56
SUP (293) 57
"main()" (294) 26
"()" (295) 43
"si(" (296) 48
"finsi" (297) 48
"sinon" (298) 49
"tantque(" (299) 51
")" (300) 51


Non-terminaux, suivis des règles où ils apparaissent

$accept (55)
    à gauche: 0
parser (56)
    à gauche: 1 2, à droite: 0
json (57)
    à gauche: 3, à droite: 1
lelems (58)
    à gauche: 4 5, à droite: 3 4
elemjson (59)
    à gauche: 6 7 8 9, à droite: 4 5
debutjson (60)
    à gauche: 10, à droite: 8
direction (61)
    à gauche: 11 12 13 14, à droite: 10
tabcases (62)
    à gauche: 15, à droite: 9
cases (63)
    à gauche: 16 17, à droite: 15 16
scase (64)
    à gauche: 18, à droite: 16 17
type (65)
    à gauche: 19 20 21 22, à droite: 18
pseudocode (66)
    à gauche: 23 24, à droite: 2 23
procedure (67)
    à gauche: 25, à droite: 23 24
signature (68)
    à gauche: 26 27, à droite: 25
arguments (69)
    à gauche: 28 29, à droite: 27 28
argument (70)
    à gauche: 30, à droite: 28 29
code (71)
    à gauche: 31 32, à droite: 26 27 31 48 49 51
ligne (72)
    à gauche: 33 34 35 36, à droite: 31 32
affectaction (73)
    à gauche: 37, à droite: 33
calcul (74)
    à gauche: 38 39, à droite: 37 38
valeur (75)
    à gauche: 40 41, à droite: 38 39 52
appelproc (76)
    à gauche: 42 43, à droite: 34
params (77)
    à gauche: 44 45, à droite: 42 45
param (78)
    à gauche: 46 47, à droite: 44 45
conditionnelle (79)
    à gauche: 48, à droite: 35
sinon (80)
    à gauche: 49 50, à droite: 48
boucle (81)
    à gauche: 51, à droite: 36
expbool (82)
    à gauche: 52, à droite: 48 51
comparateur (83)
    à gauche: 53 54 55 56 57, à droite: 52


État 0

    0 $accept: . parser $end

    PROC  décalage et aller à l'état 1
    '{'   décalage et aller à l'état 2

    parser      aller à l'état 3
    json        aller à l'état 4
    pseudocode  aller à l'état 5
    procedure   aller à l'état 6


État 1

   25 procedure: PROC . signature

    NOM       décalage et aller à l'état 7
    "main()"  décalage et aller à l'état 8

    signature  aller à l'état 9


État 2

    3 json: '{' . lelems '}'

    HAUTEUR  décalage et aller à l'état 10
    LARGEUR  décalage et aller à l'état 11
    CASES    décalage et aller à l'état 12
    DEBUT    décalage et aller à l'état 13

    lelems    aller à l'état 14
    elemjson  aller à l'état 15


État 3

    0 $accept: parser . $end

    $end  décalage et aller à l'état 16


État 4

    1 parser: json .

    $défaut  réduction par utilisation de la règle 1 (parser)


État 5

    2 parser: pseudocode .

    $défaut  réduction par utilisation de la règle 2 (parser)


État 6

   23 pseudocode: procedure . pseudocode
   24           | procedure .

    PROC  décalage et aller à l'état 1

    $défaut  réduction par utilisation de la règle 24 (pseudocode)

    pseudocode  aller à l'état 17
    procedure   aller à l'état 6


État 7

   27 signature: NOM . '(' arguments ')' code FINPROC

    '('  décalage et aller à l'état 18


État 8

   26 signature: "main()" . code FINPROC

    NOM         décalage et aller à l'état 19
    "si("       décalage et aller à l'état 20
    "tantque("  décalage et aller à l'état 21

    code            aller à l'état 22
    ligne           aller à l'état 23
    affectaction    aller à l'état 24
    appelproc       aller à l'état 25
    conditionnelle  aller à l'état 26
    boucle          aller à l'état 27


État 9

   25 procedure: PROC signature .

    $défaut  réduction par utilisation de la règle 25 (procedure)


État 10

    7 elemjson: HAUTEUR . ':' ENTIER

    ':'  décalage et aller à l'état 28


État 11

    6 elemjson: LARGEUR . ':' ENTIER

    ':'  décalage et aller à l'état 29


État 12

    9 elemjson: CASES . ':' tabcases

    ':'  décalage et aller à l'état 30


État 13

    8 elemjson: DEBUT . ':' debutjson

    ':'  décalage et aller à l'état 31


État 14

    3 json: '{' lelems . '}'

    '}'  décalage et aller à l'état 32


État 15

    4 lelems: elemjson . ',' lelems
    5       | elemjson .

    ','  décalage et aller à l'état 33

    $défaut  réduction par utilisation de la règle 5 (lelems)


État 16

    0 $accept: parser $end .

    $défaut  accepter


État 17

   23 pseudocode: procedure pseudocode .

    $défaut  réduction par utilisation de la règle 23 (pseudocode)


État 18

   27 signature: NOM '(' . arguments ')' code FINPROC

    NOM  décalage et aller à l'état 34

    arguments  aller à l'état 35
    argument   aller à l'état 36


État 19

   37 affectaction: NOM . '=' calcul
   42 appelproc: NOM . '(' params ')'
   43          | NOM . "()"

    '('   décalage et aller à l'état 37
    '='   décalage et aller à l'état 38
    "()"  décalage et aller à l'état 39


État 20

   48 conditionnelle: "si(" . expbool ')' code sinon "finsi"

    ENTIER  décalage et aller à l'état 40
    NOM     décalage et aller à l'état 41

    valeur   aller à l'état 42
    expbool  aller à l'état 43


État 21

   51 boucle: "tantque(" . expbool ")" code FINTQ

    ENTIER  décalage et aller à l'état 40
    NOM     décalage et aller à l'état 41

    valeur   aller à l'état 42
    expbool  aller à l'état 44


État 22

   26 signature: "main()" code . FINPROC

    FINPROC  décalage et aller à l'état 45


État 23

   31 code: ligne . code
   32     | ligne .

    NOM         décalage et aller à l'état 19
    "si("       décalage et aller à l'état 20
    "tantque("  décalage et aller à l'état 21

    $défaut  réduction par utilisation de la règle 32 (code)

    code            aller à l'état 46
    ligne           aller à l'état 23
    affectaction    aller à l'état 24
    appelproc       aller à l'état 25
    conditionnelle  aller à l'état 26
    boucle          aller à l'état 27


État 24

   33 ligne: affectaction .

    $défaut  réduction par utilisation de la règle 33 (ligne)


État 25

   34 ligne: appelproc .

    $défaut  réduction par utilisation de la règle 34 (ligne)


État 26

   35 ligne: conditionnelle .

    $défaut  réduction par utilisation de la règle 35 (ligne)


État 27

   36 ligne: boucle .

    $défaut  réduction par utilisation de la règle 36 (ligne)


État 28

    7 elemjson: HAUTEUR ':' . ENTIER

    ENTIER  décalage et aller à l'état 47


État 29

    6 elemjson: LARGEUR ':' . ENTIER

    ENTIER  décalage et aller à l'état 48


État 30

    9 elemjson: CASES ':' . tabcases

    '['  décalage et aller à l'état 49

    tabcases  aller à l'état 50


État 31

    8 elemjson: DEBUT ':' . debutjson

    '{'  décalage et aller à l'état 51

    debutjson  aller à l'état 52


État 32

    3 json: '{' lelems '}' .

    $défaut  réduction par utilisation de la règle 3 (json)


État 33

    4 lelems: elemjson ',' . lelems

    HAUTEUR  décalage et aller à l'état 10
    LARGEUR  décalage et aller à l'état 11
    CASES    décalage et aller à l'état 12
    DEBUT    décalage et aller à l'état 13

    lelems    aller à l'état 53
    elemjson  aller à l'état 15


État 34

   30 argument: NOM . ':' TYPE

    ':'  décalage et aller à l'état 54


État 35

   27 signature: NOM '(' arguments . ')' code FINPROC

    ')'  décalage et aller à l'état 55


État 36

   28 arguments: argument . ',' arguments
   29          | argument .

    ','  décalage et aller à l'état 56

    $défaut  réduction par utilisation de la règle 29 (arguments)


État 37

   42 appelproc: NOM '(' . params ')'

    ENTIER  décalage et aller à l'état 57
    NOM     décalage et aller à l'état 58

    params  aller à l'état 59
    param   aller à l'état 60


État 38

   37 affectaction: NOM '=' . calcul

    ENTIER  décalage et aller à l'état 40
    NOM     décalage et aller à l'état 41

    calcul  aller à l'état 61
    valeur  aller à l'état 62


État 39

   43 appelproc: NOM "()" .

    $défaut  réduction par utilisation de la règle 43 (appelproc)


État 40

   41 valeur: ENTIER .

    $défaut  réduction par utilisation de la règle 41 (valeur)


État 41

   40 valeur: NOM .

    $défaut  réduction par utilisation de la règle 40 (valeur)


État 42

   52 expbool: valeur . comparateur valeur

    INFEG   décalage et aller à l'état 63
    SUPEG   décalage et aller à l'état 64
    EGGEGG  décalage et aller à l'état 65
    INF     décalage et aller à l'état 66
    SUP     décalage et aller à l'état 67

    comparateur  aller à l'état 68


État 43

   48 conditionnelle: "si(" expbool . ')' code sinon "finsi"

    ')'  décalage et aller à l'état 69


État 44

   51 boucle: "tantque(" expbool . ")" code FINTQ

    ")"  décalage et aller à l'état 70


État 45

   26 signature: "main()" code FINPROC .

    $défaut  réduction par utilisation de la règle 26 (signature)


État 46

   31 code: ligne code .

    $défaut  réduction par utilisation de la règle 31 (code)


État 47

    7 elemjson: HAUTEUR ':' ENTIER .

    $défaut  réduction par utilisation de la règle 7 (elemjson)


État 48

    6 elemjson: LARGEUR ':' ENTIER .

    $défaut  réduction par utilisation de la règle 6 (elemjson)


État 49

   15 tabcases: '[' . cases ']'

    '{'  décalage et aller à l'état 71

    cases  aller à l'état 72
    scase  aller à l'état 73


État 50

    9 elemjson: CASES ':' tabcases .

    $défaut  réduction par utilisation de la règle 9 (elemjson)


État 51

   10 debutjson: '{' . X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    X  décalage et aller à l'état 74


État 52

    8 elemjson: DEBUT ':' debutjson .

    $défaut  réduction par utilisation de la règle 8 (elemjson)


État 53

    4 lelems: elemjson ',' lelems .

    $défaut  réduction par utilisation de la règle 4 (lelems)


État 54

   30 argument: NOM ':' . TYPE

    TYPE  décalage et aller à l'état 75


État 55

   27 signature: NOM '(' arguments ')' . code FINPROC

    NOM         décalage et aller à l'état 19
    "si("       décalage et aller à l'état 20
    "tantque("  décalage et aller à l'état 21

    code            aller à l'état 76
    ligne           aller à l'état 23
    affectaction    aller à l'état 24
    appelproc       aller à l'état 25
    conditionnelle  aller à l'état 26
    boucle          aller à l'état 27


État 56

   28 arguments: argument ',' . arguments

    NOM  décalage et aller à l'état 34

    arguments  aller à l'état 77
    argument   aller à l'état 36


État 57

   47 param: ENTIER .

    $défaut  réduction par utilisation de la règle 47 (param)


État 58

   46 param: NOM .

    $défaut  réduction par utilisation de la règle 46 (param)


État 59

   42 appelproc: NOM '(' params . ')'
   45 params: params . ',' param

    ','  décalage et aller à l'état 78
    ')'  décalage et aller à l'état 79


État 60

   44 params: param .

    $défaut  réduction par utilisation de la règle 44 (params)


État 61

   37 affectaction: NOM '=' calcul .
   38 calcul: calcul . OPERATEUR valeur

    OPERATEUR  décalage et aller à l'état 80

    $défaut  réduction par utilisation de la règle 37 (affectaction)


État 62

   39 calcul: valeur .

    $défaut  réduction par utilisation de la règle 39 (calcul)


État 63

   53 comparateur: INFEG .

    $défaut  réduction par utilisation de la règle 53 (comparateur)


État 64

   54 comparateur: SUPEG .

    $défaut  réduction par utilisation de la règle 54 (comparateur)


État 65

   55 comparateur: EGGEGG .

    $défaut  réduction par utilisation de la règle 55 (comparateur)


État 66

   56 comparateur: INF .

    $défaut  réduction par utilisation de la règle 56 (comparateur)


État 67

   57 comparateur: SUP .

    $défaut  réduction par utilisation de la règle 57 (comparateur)


État 68

   52 expbool: valeur comparateur . valeur

    ENTIER  décalage et aller à l'état 40
    NOM     décalage et aller à l'état 41

    valeur  aller à l'état 81


État 69

   48 conditionnelle: "si(" expbool ')' . code sinon "finsi"

    NOM         décalage et aller à l'état 19
    "si("       décalage et aller à l'état 20
    "tantque("  décalage et aller à l'état 21

    code            aller à l'état 82
    ligne           aller à l'état 23
    affectaction    aller à l'état 24
    appelproc       aller à l'état 25
    conditionnelle  aller à l'état 26
    boucle          aller à l'état 27


État 70

   51 boucle: "tantque(" expbool ")" . code FINTQ

    NOM         décalage et aller à l'état 19
    "si("       décalage et aller à l'état 20
    "tantque("  décalage et aller à l'état 21

    code            aller à l'état 83
    ligne           aller à l'état 23
    affectaction    aller à l'état 24
    appelproc       aller à l'état 25
    conditionnelle  aller à l'état 26
    boucle          aller à l'état 27


État 71

   18 scase: '{' . X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    X  décalage et aller à l'état 84


État 72

   15 tabcases: '[' cases . ']'

    ']'  décalage et aller à l'état 85


État 73

   16 cases: scase . ',' cases
   17      | scase .

    ','  décalage et aller à l'état 86

    $défaut  réduction par utilisation de la règle 17 (cases)


État 74

   10 debutjson: '{' X . ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ':'  décalage et aller à l'état 87


État 75

   30 argument: NOM ':' TYPE .

    $défaut  réduction par utilisation de la règle 30 (argument)


État 76

   27 signature: NOM '(' arguments ')' code . FINPROC

    FINPROC  décalage et aller à l'état 88


État 77

   28 arguments: argument ',' arguments .

    $défaut  réduction par utilisation de la règle 28 (arguments)


État 78

   45 params: params ',' . param

    ENTIER  décalage et aller à l'état 57
    NOM     décalage et aller à l'état 58

    param  aller à l'état 89


État 79

   42 appelproc: NOM '(' params ')' .

    $défaut  réduction par utilisation de la règle 42 (appelproc)


État 80

   38 calcul: calcul OPERATEUR . valeur

    ENTIER  décalage et aller à l'état 40
    NOM     décalage et aller à l'état 41

    valeur  aller à l'état 90


État 81

   52 expbool: valeur comparateur valeur .

    $défaut  réduction par utilisation de la règle 52 (expbool)


État 82

   48 conditionnelle: "si(" expbool ')' code . sinon "finsi"

    "sinon"  décalage et aller à l'état 91

    $défaut  réduction par utilisation de la règle 50 (sinon)

    sinon  aller à l'état 92


État 83

   51 boucle: "tantque(" expbool ")" code . FINTQ

    FINTQ  décalage et aller à l'état 93


État 84

   18 scase: '{' X . ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ':'  décalage et aller à l'état 94


État 85

   15 tabcases: '[' cases ']' .

    $défaut  réduction par utilisation de la règle 15 (tabcases)


État 86

   16 cases: scase ',' . cases

    '{'  décalage et aller à l'état 71

    cases  aller à l'état 95
    scase  aller à l'état 73


État 87

   10 debutjson: '{' X ':' . ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ENTIER  décalage et aller à l'état 96


État 88

   27 signature: NOM '(' arguments ')' code FINPROC .

    $défaut  réduction par utilisation de la règle 27 (signature)


État 89

   45 params: params ',' param .

    $défaut  réduction par utilisation de la règle 45 (params)


État 90

   38 calcul: calcul OPERATEUR valeur .

    $défaut  réduction par utilisation de la règle 38 (calcul)


État 91

   49 sinon: "sinon" . code

    NOM         décalage et aller à l'état 19
    "si("       décalage et aller à l'état 20
    "tantque("  décalage et aller à l'état 21

    code            aller à l'état 97
    ligne           aller à l'état 23
    affectaction    aller à l'état 24
    appelproc       aller à l'état 25
    conditionnelle  aller à l'état 26
    boucle          aller à l'état 27


État 92

   48 conditionnelle: "si(" expbool ')' code sinon . "finsi"

    "finsi"  décalage et aller à l'état 98


État 93

   51 boucle: "tantque(" expbool ")" code FINTQ .

    $défaut  réduction par utilisation de la règle 51 (boucle)


État 94

   18 scase: '{' X ':' . ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ENTIER  décalage et aller à l'état 99


État 95

   16 cases: scase ',' cases .

    $défaut  réduction par utilisation de la règle 16 (cases)


État 96

   10 debutjson: '{' X ':' ENTIER . ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ','  décalage et aller à l'état 100


État 97

   49 sinon: "sinon" code .

    $défaut  réduction par utilisation de la règle 49 (sinon)


État 98

   48 conditionnelle: "si(" expbool ')' code sinon "finsi" .

    $défaut  réduction par utilisation de la règle 48 (conditionnelle)


État 99

   18 scase: '{' X ':' ENTIER . ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ','  décalage et aller à l'état 101


État 100

   10 debutjson: '{' X ':' ENTIER ',' . Y ':' ENTIER ',' DIRECTION ':' direction '}'

    Y  décalage et aller à l'état 102


État 101

   18 scase: '{' X ':' ENTIER ',' . Y ':' ENTIER ',' TYPEJSON ':' type '}'

    Y  décalage et aller à l'état 103


État 102

   10 debutjson: '{' X ':' ENTIER ',' Y . ':' ENTIER ',' DIRECTION ':' direction '}'

    ':'  décalage et aller à l'état 104


État 103

   18 scase: '{' X ':' ENTIER ',' Y . ':' ENTIER ',' TYPEJSON ':' type '}'

    ':'  décalage et aller à l'état 105


État 104

   10 debutjson: '{' X ':' ENTIER ',' Y ':' . ENTIER ',' DIRECTION ':' direction '}'

    ENTIER  décalage et aller à l'état 106


État 105

   18 scase: '{' X ':' ENTIER ',' Y ':' . ENTIER ',' TYPEJSON ':' type '}'

    ENTIER  décalage et aller à l'état 107


État 106

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER . ',' DIRECTION ':' direction '}'

    ','  décalage et aller à l'état 108


État 107

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER . ',' TYPEJSON ':' type '}'

    ','  décalage et aller à l'état 109


État 108

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' . DIRECTION ':' direction '}'

    DIRECTION  décalage et aller à l'état 110


État 109

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' . TYPEJSON ':' type '}'

    TYPEJSON  décalage et aller à l'état 111


État 110

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION . ':' direction '}'

    ':'  décalage et aller à l'état 112


État 111

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON . ':' type '}'

    ':'  décalage et aller à l'état 113


État 112

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' . direction '}'

    BAS     décalage et aller à l'état 114
    HAUT    décalage et aller à l'état 115
    DROITE  décalage et aller à l'état 116
    GAUCHE  décalage et aller à l'état 117

    direction  aller à l'état 118


État 113

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' . type '}'

    BLOC    décalage et aller à l'état 119
    BILLE   décalage et aller à l'état 120
    CAISSE  décalage et aller à l'état 121
    TROU    décalage et aller à l'état 122

    type  aller à l'état 123


État 114

   11 direction: BAS .

    $défaut  réduction par utilisation de la règle 11 (direction)


État 115

   12 direction: HAUT .

    $défaut  réduction par utilisation de la règle 12 (direction)


État 116

   13 direction: DROITE .

    $défaut  réduction par utilisation de la règle 13 (direction)


État 117

   14 direction: GAUCHE .

    $défaut  réduction par utilisation de la règle 14 (direction)


État 118

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction . '}'

    '}'  décalage et aller à l'état 124


État 119

   22 type: BLOC .

    $défaut  réduction par utilisation de la règle 22 (type)


État 120

   21 type: BILLE .

    $défaut  réduction par utilisation de la règle 21 (type)


État 121

   19 type: CAISSE .

    $défaut  réduction par utilisation de la règle 19 (type)


État 122

   20 type: TROU .

    $défaut  réduction par utilisation de la règle 20 (type)


État 123

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type . '}'

    '}'  décalage et aller à l'état 125


État 124

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}' .

    $défaut  réduction par utilisation de la règle 10 (debutjson)


État 125

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}' .

    $défaut  réduction par utilisation de la règle 18 (scase)
