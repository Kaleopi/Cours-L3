Terminaux inutilisés dans la grammaire

   VRAI
   FAUX
   CASE
   FUNC
   F_AVANCE
   F_DROITE
   F_GAUCHE
   FINTQ
   FINFUNC
   INFEG
   SUPEG
   EGEG
   INF
   SUP


Grammaire

    0 $accept: parser $end

    1 parser: json
    2       | pseudocode

    3 json: '{' lelems '}'

    4 lelems: elemjson ',' lelems
    5       | elemjson

    6 elemjson: LARGEUR ':' ENTIER
    7         | HAUTEUR ':' ENTIER
    8         | DEBUT ':' debutjson
    9         | CASES ':' tabcases

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

   11 direction: BAS
   12          | HAUT
   13          | DROITE
   14          | GAUCHE

   15 tabcases: '[' cases ']'

   16 cases: scase ',' cases
   17      | scase

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

   19 type: CAISSE
   20     | TROU
   21     | BILLE
   22     | BLOC

   23 pseudocode: procedure pseudocode
   24           | procedure

   25 procedure: PROC signature

   26 signature: "main()" code FINPROC
   27          | NOM '(' arguments ')' code FINPROC

   28 arguments: argument ',' arguments
   29          | argument

   30 argument: NOM ':' TYPE

   31 code: ligne code
   32     | ligne

   33 ligne: affectaction
   34      | appelproc

   35 affectaction: NOM '=' calcul

   36 calcul: calcul OPERATEUR valeur
   37       | valeur

   38 valeur: NOM
   39       | ENTIER

   40 appelproc: NOM '(' params ')'
   41          | NOM "()"

   42 params: param
   43       | params ',' param

   44 param: NOM
   45      | ENTIER


Terminaux, suivis des règles où ils apparaissent

$end (0) 0
'(' (40) 27 40
')' (41) 27 40
',' (44) 4 10 16 18 28 43
':' (58) 6 7 8 9 10 18 30
'=' (61) 35
'[' (91) 15
']' (93) 15
'{' (123) 3 10 18
'}' (125) 3 10 18
error (256)
ENTIER (258) 6 7 10 18 39 45
NOM (259) 27 30 35 38 40 41 44
VRAI (260)
FAUX (261)
OPERATEUR (262) 36
HAUTEUR (263) 7
LARGEUR (264) 6
X (265) 10 18
Y (266) 10 18
TYPEJSON (267) 18
BLOC (268) 22
BILLE (269) 21
CAISSE (270) 19
TROU (271) 20
CASE (272)
CASES (273) 9
DEBUT (274) 8
DIRECTION (275) 10
BAS (276) 11
HAUT (277) 12
DROITE (278) 13
GAUCHE (279) 14
TYPE (280) 30
PROC (281) 25
FUNC (282)
F_AVANCE (283)
F_DROITE (284)
F_GAUCHE (285)
FINTQ (286)
FINPROC (287) 26 27
FINFUNC (288)
INFEG (289)
SUPEG (290)
EGEG (291)
INF (292)
SUP (293)
"main()" (294) 26
"()" (295) 41


Non-terminaux, suivis des règles où ils apparaissent

$accept (50)
    à gauche: 0
parser (51)
    à gauche: 1 2, à droite: 0
json (52)
    à gauche: 3, à droite: 1
lelems (53)
    à gauche: 4 5, à droite: 3 4
elemjson (54)
    à gauche: 6 7 8 9, à droite: 4 5
debutjson (55)
    à gauche: 10, à droite: 8
direction (56)
    à gauche: 11 12 13 14, à droite: 10
tabcases (57)
    à gauche: 15, à droite: 9
cases (58)
    à gauche: 16 17, à droite: 15 16
scase (59)
    à gauche: 18, à droite: 16 17
type (60)
    à gauche: 19 20 21 22, à droite: 18
pseudocode (61)
    à gauche: 23 24, à droite: 2 23
procedure (62)
    à gauche: 25, à droite: 23 24
signature (63)
    à gauche: 26 27, à droite: 25
arguments (64)
    à gauche: 28 29, à droite: 27 28
argument (65)
    à gauche: 30, à droite: 28 29
code (66)
    à gauche: 31 32, à droite: 26 27 31
ligne (67)
    à gauche: 33 34, à droite: 31 32
affectaction (68)
    à gauche: 35, à droite: 33
calcul (69)
    à gauche: 36 37, à droite: 35 36
valeur (70)
    à gauche: 38 39, à droite: 36 37
appelproc (71)
    à gauche: 40 41, à droite: 34
params (72)
    à gauche: 42 43, à droite: 40 43
param (73)
    à gauche: 44 45, à droite: 42 43


État 0

    0 $accept: . parser $end

    PROC  décalage et aller à l'état 1
    '{'   décalage et aller à l'état 2

    parser      aller à l'état 3
    json        aller à l'état 4
    pseudocode  aller à l'état 5
    procedure   aller à l'état 6


État 1

   25 procedure: PROC . signature

    NOM       décalage et aller à l'état 7
    "main()"  décalage et aller à l'état 8

    signature  aller à l'état 9


État 2

    3 json: '{' . lelems '}'

    HAUTEUR  décalage et aller à l'état 10
    LARGEUR  décalage et aller à l'état 11
    CASES    décalage et aller à l'état 12
    DEBUT    décalage et aller à l'état 13

    lelems    aller à l'état 14
    elemjson  aller à l'état 15


État 3

    0 $accept: parser . $end

    $end  décalage et aller à l'état 16


État 4

    1 parser: json .

    $défaut  réduction par utilisation de la règle 1 (parser)


État 5

    2 parser: pseudocode .

    $défaut  réduction par utilisation de la règle 2 (parser)


État 6

   23 pseudocode: procedure . pseudocode
   24           | procedure .

    PROC  décalage et aller à l'état 1

    $défaut  réduction par utilisation de la règle 24 (pseudocode)

    pseudocode  aller à l'état 17
    procedure   aller à l'état 6


État 7

   27 signature: NOM . '(' arguments ')' code FINPROC

    '('  décalage et aller à l'état 18


État 8

   26 signature: "main()" . code FINPROC

    NOM  décalage et aller à l'état 19

    code          aller à l'état 20
    ligne         aller à l'état 21
    affectaction  aller à l'état 22
    appelproc     aller à l'état 23


État 9

   25 procedure: PROC signature .

    $défaut  réduction par utilisation de la règle 25 (procedure)


État 10

    7 elemjson: HAUTEUR . ':' ENTIER

    ':'  décalage et aller à l'état 24


État 11

    6 elemjson: LARGEUR . ':' ENTIER

    ':'  décalage et aller à l'état 25


État 12

    9 elemjson: CASES . ':' tabcases

    ':'  décalage et aller à l'état 26


État 13

    8 elemjson: DEBUT . ':' debutjson

    ':'  décalage et aller à l'état 27


État 14

    3 json: '{' lelems . '}'

    '}'  décalage et aller à l'état 28


État 15

    4 lelems: elemjson . ',' lelems
    5       | elemjson .

    ','  décalage et aller à l'état 29

    $défaut  réduction par utilisation de la règle 5 (lelems)


État 16

    0 $accept: parser $end .

    $défaut  accepter


État 17

   23 pseudocode: procedure pseudocode .

    $défaut  réduction par utilisation de la règle 23 (pseudocode)


État 18

   27 signature: NOM '(' . arguments ')' code FINPROC

    NOM  décalage et aller à l'état 30

    arguments  aller à l'état 31
    argument   aller à l'état 32


État 19

   35 affectaction: NOM . '=' calcul
   40 appelproc: NOM . '(' params ')'
   41          | NOM . "()"

    '('   décalage et aller à l'état 33
    '='   décalage et aller à l'état 34
    "()"  décalage et aller à l'état 35


État 20

   26 signature: "main()" code . FINPROC

    FINPROC  décalage et aller à l'état 36


État 21

   31 code: ligne . code
   32     | ligne .

    NOM  décalage et aller à l'état 19

    $défaut  réduction par utilisation de la règle 32 (code)

    code          aller à l'état 37
    ligne         aller à l'état 21
    affectaction  aller à l'état 22
    appelproc     aller à l'état 23


État 22

   33 ligne: affectaction .

    $défaut  réduction par utilisation de la règle 33 (ligne)


État 23

   34 ligne: appelproc .

    $défaut  réduction par utilisation de la règle 34 (ligne)


État 24

    7 elemjson: HAUTEUR ':' . ENTIER

    ENTIER  décalage et aller à l'état 38


État 25

    6 elemjson: LARGEUR ':' . ENTIER

    ENTIER  décalage et aller à l'état 39


État 26

    9 elemjson: CASES ':' . tabcases

    '['  décalage et aller à l'état 40

    tabcases  aller à l'état 41


État 27

    8 elemjson: DEBUT ':' . debutjson

    '{'  décalage et aller à l'état 42

    debutjson  aller à l'état 43


État 28

    3 json: '{' lelems '}' .

    $défaut  réduction par utilisation de la règle 3 (json)


État 29

    4 lelems: elemjson ',' . lelems

    HAUTEUR  décalage et aller à l'état 10
    LARGEUR  décalage et aller à l'état 11
    CASES    décalage et aller à l'état 12
    DEBUT    décalage et aller à l'état 13

    lelems    aller à l'état 44
    elemjson  aller à l'état 15


État 30

   30 argument: NOM . ':' TYPE

    ':'  décalage et aller à l'état 45


État 31

   27 signature: NOM '(' arguments . ')' code FINPROC

    ')'  décalage et aller à l'état 46


État 32

   28 arguments: argument . ',' arguments
   29          | argument .

    ','  décalage et aller à l'état 47

    $défaut  réduction par utilisation de la règle 29 (arguments)


État 33

   40 appelproc: NOM '(' . params ')'

    ENTIER  décalage et aller à l'état 48
    NOM     décalage et aller à l'état 49

    params  aller à l'état 50
    param   aller à l'état 51


État 34

   35 affectaction: NOM '=' . calcul

    ENTIER  décalage et aller à l'état 52
    NOM     décalage et aller à l'état 53

    calcul  aller à l'état 54
    valeur  aller à l'état 55


État 35

   41 appelproc: NOM "()" .

    $défaut  réduction par utilisation de la règle 41 (appelproc)


État 36

   26 signature: "main()" code FINPROC .

    $défaut  réduction par utilisation de la règle 26 (signature)


État 37

   31 code: ligne code .

    $défaut  réduction par utilisation de la règle 31 (code)


État 38

    7 elemjson: HAUTEUR ':' ENTIER .

    $défaut  réduction par utilisation de la règle 7 (elemjson)


État 39

    6 elemjson: LARGEUR ':' ENTIER .

    $défaut  réduction par utilisation de la règle 6 (elemjson)


État 40

   15 tabcases: '[' . cases ']'

    '{'  décalage et aller à l'état 56

    cases  aller à l'état 57
    scase  aller à l'état 58


État 41

    9 elemjson: CASES ':' tabcases .

    $défaut  réduction par utilisation de la règle 9 (elemjson)


État 42

   10 debutjson: '{' . X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    X  décalage et aller à l'état 59


État 43

    8 elemjson: DEBUT ':' debutjson .

    $défaut  réduction par utilisation de la règle 8 (elemjson)


État 44

    4 lelems: elemjson ',' lelems .

    $défaut  réduction par utilisation de la règle 4 (lelems)


État 45

   30 argument: NOM ':' . TYPE

    TYPE  décalage et aller à l'état 60


État 46

   27 signature: NOM '(' arguments ')' . code FINPROC

    NOM  décalage et aller à l'état 19

    code          aller à l'état 61
    ligne         aller à l'état 21
    affectaction  aller à l'état 22
    appelproc     aller à l'état 23


État 47

   28 arguments: argument ',' . arguments

    NOM  décalage et aller à l'état 30

    arguments  aller à l'état 62
    argument   aller à l'état 32


État 48

   45 param: ENTIER .

    $défaut  réduction par utilisation de la règle 45 (param)


État 49

   44 param: NOM .

    $défaut  réduction par utilisation de la règle 44 (param)


État 50

   40 appelproc: NOM '(' params . ')'
   43 params: params . ',' param

    ','  décalage et aller à l'état 63
    ')'  décalage et aller à l'état 64


État 51

   42 params: param .

    $défaut  réduction par utilisation de la règle 42 (params)


État 52

   39 valeur: ENTIER .

    $défaut  réduction par utilisation de la règle 39 (valeur)


État 53

   38 valeur: NOM .

    $défaut  réduction par utilisation de la règle 38 (valeur)


État 54

   35 affectaction: NOM '=' calcul .
   36 calcul: calcul . OPERATEUR valeur

    OPERATEUR  décalage et aller à l'état 65

    $défaut  réduction par utilisation de la règle 35 (affectaction)


État 55

   37 calcul: valeur .

    $défaut  réduction par utilisation de la règle 37 (calcul)


État 56

   18 scase: '{' . X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    X  décalage et aller à l'état 66


État 57

   15 tabcases: '[' cases . ']'

    ']'  décalage et aller à l'état 67


État 58

   16 cases: scase . ',' cases
   17      | scase .

    ','  décalage et aller à l'état 68

    $défaut  réduction par utilisation de la règle 17 (cases)


État 59

   10 debutjson: '{' X . ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ':'  décalage et aller à l'état 69


État 60

   30 argument: NOM ':' TYPE .

    $défaut  réduction par utilisation de la règle 30 (argument)


État 61

   27 signature: NOM '(' arguments ')' code . FINPROC

    FINPROC  décalage et aller à l'état 70


État 62

   28 arguments: argument ',' arguments .

    $défaut  réduction par utilisation de la règle 28 (arguments)


État 63

   43 params: params ',' . param

    ENTIER  décalage et aller à l'état 48
    NOM     décalage et aller à l'état 49

    param  aller à l'état 71


État 64

   40 appelproc: NOM '(' params ')' .

    $défaut  réduction par utilisation de la règle 40 (appelproc)


État 65

   36 calcul: calcul OPERATEUR . valeur

    ENTIER  décalage et aller à l'état 52
    NOM     décalage et aller à l'état 53

    valeur  aller à l'état 72


État 66

   18 scase: '{' X . ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ':'  décalage et aller à l'état 73


État 67

   15 tabcases: '[' cases ']' .

    $défaut  réduction par utilisation de la règle 15 (tabcases)


État 68

   16 cases: scase ',' . cases

    '{'  décalage et aller à l'état 56

    cases  aller à l'état 74
    scase  aller à l'état 58


État 69

   10 debutjson: '{' X ':' . ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ENTIER  décalage et aller à l'état 75


État 70

   27 signature: NOM '(' arguments ')' code FINPROC .

    $défaut  réduction par utilisation de la règle 27 (signature)


État 71

   43 params: params ',' param .

    $défaut  réduction par utilisation de la règle 43 (params)


État 72

   36 calcul: calcul OPERATEUR valeur .

    $défaut  réduction par utilisation de la règle 36 (calcul)


État 73

   18 scase: '{' X ':' . ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ENTIER  décalage et aller à l'état 76


État 74

   16 cases: scase ',' cases .

    $défaut  réduction par utilisation de la règle 16 (cases)


État 75

   10 debutjson: '{' X ':' ENTIER . ',' Y ':' ENTIER ',' DIRECTION ':' direction '}'

    ','  décalage et aller à l'état 77


État 76

   18 scase: '{' X ':' ENTIER . ',' Y ':' ENTIER ',' TYPEJSON ':' type '}'

    ','  décalage et aller à l'état 78


État 77

   10 debutjson: '{' X ':' ENTIER ',' . Y ':' ENTIER ',' DIRECTION ':' direction '}'

    Y  décalage et aller à l'état 79


État 78

   18 scase: '{' X ':' ENTIER ',' . Y ':' ENTIER ',' TYPEJSON ':' type '}'

    Y  décalage et aller à l'état 80


État 79

   10 debutjson: '{' X ':' ENTIER ',' Y . ':' ENTIER ',' DIRECTION ':' direction '}'

    ':'  décalage et aller à l'état 81


État 80

   18 scase: '{' X ':' ENTIER ',' Y . ':' ENTIER ',' TYPEJSON ':' type '}'

    ':'  décalage et aller à l'état 82


État 81

   10 debutjson: '{' X ':' ENTIER ',' Y ':' . ENTIER ',' DIRECTION ':' direction '}'

    ENTIER  décalage et aller à l'état 83


État 82

   18 scase: '{' X ':' ENTIER ',' Y ':' . ENTIER ',' TYPEJSON ':' type '}'

    ENTIER  décalage et aller à l'état 84


État 83

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER . ',' DIRECTION ':' direction '}'

    ','  décalage et aller à l'état 85


État 84

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER . ',' TYPEJSON ':' type '}'

    ','  décalage et aller à l'état 86


État 85

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' . DIRECTION ':' direction '}'

    DIRECTION  décalage et aller à l'état 87


État 86

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' . TYPEJSON ':' type '}'

    TYPEJSON  décalage et aller à l'état 88


État 87

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION . ':' direction '}'

    ':'  décalage et aller à l'état 89


État 88

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON . ':' type '}'

    ':'  décalage et aller à l'état 90


État 89

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' . direction '}'

    BAS     décalage et aller à l'état 91
    HAUT    décalage et aller à l'état 92
    DROITE  décalage et aller à l'état 93
    GAUCHE  décalage et aller à l'état 94

    direction  aller à l'état 95


État 90

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' . type '}'

    BLOC    décalage et aller à l'état 96
    BILLE   décalage et aller à l'état 97
    CAISSE  décalage et aller à l'état 98
    TROU    décalage et aller à l'état 99

    type  aller à l'état 100


État 91

   11 direction: BAS .

    $défaut  réduction par utilisation de la règle 11 (direction)


État 92

   12 direction: HAUT .

    $défaut  réduction par utilisation de la règle 12 (direction)


État 93

   13 direction: DROITE .

    $défaut  réduction par utilisation de la règle 13 (direction)


État 94

   14 direction: GAUCHE .

    $défaut  réduction par utilisation de la règle 14 (direction)


État 95

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction . '}'

    '}'  décalage et aller à l'état 101


État 96

   22 type: BLOC .

    $défaut  réduction par utilisation de la règle 22 (type)


État 97

   21 type: BILLE .

    $défaut  réduction par utilisation de la règle 21 (type)


État 98

   19 type: CAISSE .

    $défaut  réduction par utilisation de la règle 19 (type)


État 99

   20 type: TROU .

    $défaut  réduction par utilisation de la règle 20 (type)


État 100

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type . '}'

    '}'  décalage et aller à l'état 102


État 101

   10 debutjson: '{' X ':' ENTIER ',' Y ':' ENTIER ',' DIRECTION ':' direction '}' .

    $défaut  réduction par utilisation de la règle 10 (debutjson)


État 102

   18 scase: '{' X ':' ENTIER ',' Y ':' ENTIER ',' TYPEJSON ':' type '}' .

    $défaut  réduction par utilisation de la règle 18 (scase)
